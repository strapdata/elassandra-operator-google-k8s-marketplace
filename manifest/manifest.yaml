---
# Source: elassandra-datacenter/templates/elassandraconfigmap.yaml
# Config files mounted in /etc/cassandra
apiVersion: v1
kind: ConfigMap
metadata:
  name: "elassandra-$config_cluster_name-$config_datacenter"
  namespace: $NAMESPACE
  labels:
    app: elassandra-datacenter
    app.kubernetes.io/name: "$config_cluster_name-$config_datacenter"
data:
  logback.xml: |-
    <!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
    -->

    <configuration scan="true" debug="false">
    <jmxConfigurator />
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${CASSANDRA_LOGDIR}/system.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
    <fileNamePattern>${CASSANDRA_LOGDIR}/system.log.%i.zip</fileNamePattern>
    <minIndex>1</minIndex>
    <maxIndex>20</maxIndex>
    </rollingPolicy>

    <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
    <maxFileSize>500MB</maxFileSize>
    </triggeringPolicy>
    <encoder>
    <pattern>%date{ISO8601} %-5level [%thread] %F:%L %M %msg%n</pattern>
    <!-- old-style log format
    <pattern>%5level [%thread] %date{ISO8601} %F (line %L) %msg%n</pattern>
    -->
    </encoder>
    </appender>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
    <pattern>%date{ISO8601} %-5level [%thread] %C.%M:%L %msg%n</pattern>
    </encoder>
    </appender>

    <appender name="AUDIT" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${CASSANDRA_LOGDIR}/audit.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
    <fileNamePattern>${CASSANDRA_LOGDIR}/audit.log.%i.zip</fileNamePattern>
    <minIndex>1</minIndex>
    <maxIndex>20</maxIndex>
    </rollingPolicy>
    <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
    <maxFileSize>500MB</maxFileSize>
    </triggeringPolicy>
    <encoder>
    <pattern>%date{ISO8601} %msg%n</pattern>
    </encoder>
    </appender>

    <logger name="com.thinkaurelius.thrift" level="ERROR"/>
    <logger name="org.apache" level="WARN" />

    <!-- Use env variables to customize logging level from docker -->
    <logger name="org.apache.cassandra" level="${LOGBACK_org_apache_cassandra:-WARN}" />
    <logger name="org.apache.cassandra.service.CassandraDaemon" level="${LOGBACK_org_apache_cassandra_service_CassandraDaemon:-INFO}" />

    <logger name="org.elassandra.shard" level="${LOGBACK_org_elassandra_shard:-INFO}" />
    <logger name="org.elassandra.indices" level="${LOGBACK_org_elassandra_indices:-INFO}" />
    <logger name="org.elassandra.index" level="${LOGBACK_org_elassandra_index:-WARN}" />
    <logger name="org.elassandra.discovery" level="${LOGBACK_org_elassandra_discovery:-WARN}" />
    <logger name="org.elasticsearch.cluster.service" level="${LOGBACK_org_elassandra_cluster_service:-DEBUG}" />
    <logger name="org.elasticsearch.cluster.metadata" level="DEBUG" />
    <logger name="org.elasticsearch" level="${LOGBACK_org_elasticsearch:-WARN}" />

    <root level="INFO">
      <appender-ref ref="STDOUT" />
    </root>

    <logger name="LogbackAuditor" level="DEBUG" additivity="false" >
       <appender-ref ref="AUDIT" />
    </logger>

    </configuration>
---
# Source: elassandra-datacenter/templates/elassandradatacenter.yaml
apiVersion: stable.strapdata.com/v1
kind: ElassandraDataCenter
metadata:
  name: "elassandra-$config_cluster_name-$config_datacenter"
  namespace: $NAMESPACE
  labels:
    app: elassandra-datacenter
    app.kubernetes.io/name: "$config_cluster_name-$config_datacenter"
spec:
  clusterName: "$config_cluster_name"
  datacenterName: "$config_datacenter"
  replicas: $config_replicas
  replicasMode: $config_replicas_mode
  workload: $config_workload
  elassandraImage: "gcr.io/strapdata-gcp-partnership/elassandra-node-dev:6.2.3.21"
  sidecarImage: "gcr.io/strapdata-gcp-partnership/elassandra-sidecar-dev:6.2.3.21"
  imagePullPolicy: Always
  elasticsearchEnabled: $config_elastic_enabled
  resources:
    limits:
      cpu: "$config_elassandra_limit_cpu"
      memory: "$config_elassandra_limit_mem"
    requests:
      cpu: "$config_elassandra_req_cpu"
      memory: "$config_elassandra_req_mem"

  dataVolumeClaim:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: "$config_data_volume_storage_size"

  userConfigMapVolumeSource:
    name: "elassandra-$config_cluster_name-$config_datacenter"
    items:
      - key: logback.xml
        path: logback.xml
  prometheusEnabled: $config_prometheus_enabled
  reaperEnabled: $config_reaper_enabled
  reaper:
    image: "gcr.io/strapdata-gcp-partnership/cassandra-reaper:1.4.7.1"
  kibanaImage: "gcr.io/strapdata-gcp-partnership/kibana-oss:6.2.3"
  privilegedSupported: true
  hostPortEnabled: true
  nativePort : "$config_native_port"
  storagePort : "$config_storage_port"
  sslStoragePort : "$config_ssl_storage_port"
  jmxPort: $config_jmx_port
  ssl: $config_use_ssl
  hostNetworkEnabled: false

  authentication:
    CASSANDRA

  enterprise:
    aaa:
      audit: true
      enabled: true
    cbs: true
    enabled: true
    https: true
    jmx: true
    ssl: true
---
# Source: elassandra-operator/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: $APP_INSTANCE_NAME
    app.kubernetes.io/name: $APP_INSTANCE_NAME
    operator: elassandra
  name: $APP_INSTANCE_NAME
  namespace: $NAMESPACE
spec:
  type: ClusterIP
  ports:
    - port: $config_op_http_port
      targetPort: $config_op_http_port
      protocol: TCP
      name: strapkop
    - port: $config_op_jmx_port
      targetPort: $config_op_jmx_port
      protocol: TCP
      name: jmx
  selector:
    app: $APP_INSTANCE_NAME
---
# Source: elassandra-operator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: $APP_INSTANCE_NAME
    app.kubernetes.io/name: $APP_INSTANCE_NAME
    operator: elassandra
  name: $APP_INSTANCE_NAME
  namespace: $NAMESPACE
spec:
  replicas: 1
  selector:
    matchLabels:
      app: $APP_INSTANCE_NAME
      operator: elassandra
  template:
    metadata:
      labels:
        app: $APP_INSTANCE_NAME
        operator: elassandra
    spec:
      containers:
        - name: $APP_INSTANCE_NAME
          image: "$APP_IMAGE"
          imagePullPolicy: "Always"
          terminationMessagePolicy: "FallbackToLogsOnError"
          #          Uncomment and modify to change operator behaviour via start up flags
          #          command: ["java"]
          #          args: ["-jar", "/opt/lib/elassandra-operator/elassandra-operator.jar", "--no-version-check=false"]
          ports:
            - containerPort: $config_op_http_port
              name: http
            - containerPort: 5005
              name: jdb
            - containerPort: $config_op_jmx_port
              name: jmx
          readinessProbe:
            httpGet:
              path: /ready
              port: $config_op_http_port
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            {}

          env:
            - name: ELASSANDRA_OPERATOR_NAME
              value: "elassandra_initcontainer"
            - name: OPERATOR_NAMESPACE
              value: $NAMESPACE
            - name: LOGBACK_com_strapdata_strapkop_k8s
              value: "DEBUG"
            - name: LOGBACK_com_strapdata_strapkop_event
              value: "DEBUG"
            - name: LOGBACK_com_strapdata_strapkop_source
              value: "DEBUG"
            - name: LOGBACK_com_strapdata_strapkop_handler
              value: "DEBUG"
            - name: LOGBACK_com_strapdata_strapkop_pipeline
              value: "DEBUG"
      serviceAccountName: $operator_sa
---